package br.com.ortus.gui;

import br.com.ortus.beans.Estoque;
import br.com.ortus.beans.PedidosReservados;
import br.com.ortus.beans.Usuario;
import br.com.ortus.configuracaoPersistencia.DBConnection;
import br.com.ortus.configuracaoPersistencia.TransactionManager;
import br.com.ortus.daosSistema.EstoqueDao;
import br.com.ortus.daosSistema.PedidosReservadosDao;
import br.com.ortus.utilidades.HashSistema;
import br.com.ortus.utilidades.Utilidades;
import java.awt.Color;
import java.awt.Component;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import static java.lang.Thread.sleep;
import java.net.URL;
import java.text.ParseException;
import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author Paulo
 */
public class JDialogPedidosReservados extends javax.swing.JDialog {

    private List<PedidosReservados> pedidosParaEnviar;
    private List<PedidosReservados> pedidosEnviados;
    private List<PedidosReservados> pedidosCancelados;
    private List<PedidosReservados> pedidosAguardandoAprovacao;
    private Estoque estoquePA;

    public JDialogPedidosReservados(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        pedidosParaEnviar = new ArrayList<PedidosReservados>();
        pedidosEnviados = new ArrayList<PedidosReservados>();
        pedidosCancelados = new ArrayList<PedidosReservados>();
        pedidosAguardandoAprovacao = new ArrayList<PedidosReservados>();
        popularTabelaParaEnviar(false);
        popularTabelaEnviados();
        popularTabelaCancelados();
        popularTabelaAguardandoAprovacao();
        popularTabelaEstoquePA();
        pintarLinhas();
        verificarUsuario();
        iniciarThreadDasTabelas();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldObs = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jFormattedTextFieldDataEntregaPA = new javax.swing.JFormattedTextField();
        jButtonSalvar = new javax.swing.JButton();
        jButtonRemover = new javax.swing.JButton();
        jButtonLimpar = new javax.swing.JButton();
        jButtonFechar = new javax.swing.JButton();
        jTextFieldID = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jFormattedTextFieldDataEmissaoPedido = new javax.swing.JFormattedTextField();
        jTextFieldCliente = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jFormattedTextFieldDataPrevista = new javax.swing.JFormattedTextField();
        jLabel18 = new javax.swing.JLabel();
        jSpinnerBioJato = new javax.swing.JSpinner();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jSpinnerBioscalerCB = new javax.swing.JSpinner();
        jSpinnerBioscalerSB = new javax.swing.JSpinner();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jSpinnerSoniI = new javax.swing.JSpinner();
        jLabel23 = new javax.swing.JLabel();
        jSpinnerSoniII = new javax.swing.JSpinner();
        jLabel25 = new javax.swing.JLabel();
        jSpinnerLedLuxI = new javax.swing.JSpinner();
        jSpinnerLedLuxII = new javax.swing.JSpinner();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jFormattedTextFieldDataEnvioPA = new javax.swing.JFormattedTextField();
        jTextFieldNumeroPedido = new javax.swing.JTextField();
        jComboBoxStatus = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jComboBoxRepresentante = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        jComboBoxEnvio = new javax.swing.JComboBox();
        jLabel28 = new javax.swing.JLabel();
        jSpinnerKitLedLux = new javax.swing.JSpinner();
        jLabel29 = new javax.swing.JLabel();
        jSpinnerKitOrtusonic = new javax.swing.JSpinner();
        jLabel30 = new javax.swing.JLabel();
        jSpinnerKitJato = new javax.swing.JSpinner();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableParaEnviar = new javax.swing.JTable();
        jButtonAlterarPendente = new javax.swing.JButton();
        jTextFieldResultadoPendente = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jButtonImprimir = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableAguardandoAprovacao = new javax.swing.JTable();
        jTextFieldResultadoComEstoquePa = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        jButtonAlterarCancelamentos1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableEnviados = new javax.swing.JTable();
        jTextFieldResultadoEnviadas = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jButtonAlterarEnviadas = new javax.swing.JButton();
        jButtonImprimirEnviadas = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCancelados = new javax.swing.JTable();
        jTextFieldResultadoCancelamentos = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jButtonAlterarCancelamentos = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableEstoquePA = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel2.setBackground(new java.awt.Color(153, 153, 255));

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Controle de Pedidos Reservados");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(466, 466, 466))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 204, 204));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Cadastro"));

        jLabel2.setText("Data Pedido");

        jLabel3.setText("NÂº Pedido");

        jLabel7.setText("OBS.");

        jLabel10.setText("Data Entrega PA");

        try {
            jFormattedTextFieldDataEntregaPA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/2013")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldDataEntregaPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldDataEntregaPAFocusLost(evt);
            }
        });

        jButtonSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/save2.png"))); // NOI18N
        jButtonSalvar.setText("Salvar");
        jButtonSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSalvarActionPerformed(evt);
            }
        });

        jButtonRemover.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/trashcan_delete_17.png"))); // NOI18N
        jButtonRemover.setText("Remover");
        jButtonRemover.setEnabled(false);
        jButtonRemover.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoverActionPerformed(evt);
            }
        });

        jButtonLimpar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/limpar.png"))); // NOI18N
        jButtonLimpar.setText("Limpar");
        jButtonLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLimparActionPerformed(evt);
            }
        });

        jButtonFechar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/close.png"))); // NOI18N
        jButtonFechar.setText("Fechar");
        jButtonFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFecharActionPerformed(evt);
            }
        });

        jTextFieldID.setEditable(false);

        jLabel11.setText("ID");

        try {
            jFormattedTextFieldDataEmissaoPedido.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/2013")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldDataEmissaoPedido.setToolTipText("");
        jFormattedTextFieldDataEmissaoPedido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldDataEmissaoPedidoFocusLost(evt);
            }
        });

        jLabel16.setText("Cliente");

        jLabel17.setText("Representante");
        jLabel17.setToolTipText("Teste");

        try {
            jFormattedTextFieldDataPrevista.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/2013")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldDataPrevista.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldDataPrevistaFocusLost(evt);
            }
        });

        jLabel18.setText("Data Prevista");

        jLabel19.setText("Biojato");

        jLabel20.setText("Bioscaler CB");

        jLabel21.setText("Bioscaler SB");

        jLabel22.setText("Soni I");

        jLabel23.setText("Soni II");

        jLabel25.setText("Led Lux I");

        jLabel26.setText("Led Lux II");

        jLabel27.setText("Data Envio PA");

        try {
            jFormattedTextFieldDataEnvioPA.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##/##/2013")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        jFormattedTextFieldDataEnvioPA.setEnabled(false);
        jFormattedTextFieldDataEnvioPA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFormattedTextFieldDataEnvioPAFocusLost(evt);
            }
        });

        jTextFieldNumeroPedido.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTextFieldNumeroPedidoFocusLost(evt);
            }
        });

        jComboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Para Enviar", "Aguardando AprovaÃ§Ã£o", "Enviado", "Cancelado" }));
        jComboBoxStatus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxStatusActionPerformed(evt);
            }
        });

        jLabel4.setText("Status");

        jComboBoxRepresentante.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Juliana", "Tathiany", "Vanderleia", "Ortiz", "Outro" }));

        jLabel5.setText("Envio");

        jComboBoxEnvio.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Correio", "Transportadora", "O Mesmo" }));

        jLabel28.setText("Kit Led Lux");

        jLabel29.setText("Kit Ortusonic");

        jLabel30.setText("Kit Jato");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(53, 53, 53)
                        .addComponent(jLabel2)
                        .addGap(27, 27, 27)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel16)
                        .addGap(108, 108, 108)
                        .addComponent(jLabel17)
                        .addGap(41, 41, 41)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16)
                        .addComponent(jLabel7))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFormattedTextFieldDataEmissaoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jTextFieldNumeroPedido, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jTextFieldCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addComponent(jComboBoxRepresentante, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jFormattedTextFieldDataPrevista, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextFieldObs, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel4)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jFormattedTextFieldDataEntregaPA, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel10)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerBioJato, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel19))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jSpinnerBioscalerCB, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3))
                            .addComponent(jLabel20))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jSpinnerBioscalerSB, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(3, 3, 3))
                            .addComponent(jLabel21))
                        .addGap(13, 13, 13)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerSoniI, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerSoniII, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSpinnerLedLuxI, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerLedLuxII, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel26))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerKitLedLux, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel28))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerKitOrtusonic, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel29))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerKitJato, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel30)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(jButtonSalvar)
                                .addGap(10, 10, 10)
                                .addComponent(jButtonRemover)
                                .addGap(10, 10, 10)
                                .addComponent(jButtonLimpar)
                                .addGap(10, 10, 10)
                                .addComponent(jButtonFechar)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel27)
                        .addComponent(jFormattedTextFieldDataEnvioPA, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jComboBoxEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5))
                        .addGap(13, 13, 13)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel3)
                                .addComponent(jLabel16)
                                .addComponent(jLabel2)
                                .addComponent(jLabel11))
                            .addComponent(jLabel17)
                            .addComponent(jLabel18)
                            .addComponent(jLabel7))
                        .addGap(6, 6, 6)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jFormattedTextFieldDataEmissaoPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextFieldID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jTextFieldNumeroPedido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBoxRepresentante, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jFormattedTextFieldDataPrevista, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jTextFieldObs, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel25)
                                    .addComponent(jLabel26)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel10))
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinnerSoniI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerSoniII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerLedLuxI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerLedLuxII, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jFormattedTextFieldDataEntregaPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel28)
                                .addGap(6, 6, 6)
                                .addComponent(jSpinnerKitLedLux, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel29)
                                .addGap(6, 6, 6)
                                .addComponent(jSpinnerKitOrtusonic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel19)
                                .addGap(6, 6, 6)
                                .addComponent(jSpinnerBioJato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel20)
                                .addGap(6, 6, 6)
                                .addComponent(jSpinnerBioscalerCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel21)
                                .addGap(6, 6, 6)
                                .addComponent(jSpinnerBioscalerSB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6)
                        .addComponent(jComboBoxEnvio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(jLabel27)
                        .addGap(6, 6, 6)
                        .addComponent(jFormattedTextFieldDataEnvioPA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addGap(6, 6, 6)
                        .addComponent(jSpinnerKitJato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSalvar)
                    .addComponent(jButtonRemover)
                    .addComponent(jButtonLimpar)
                    .addComponent(jButtonFechar)))
        );

        jTableParaEnviar.setBackground(new java.awt.Color(255, 255, 204));
        jTableParaEnviar.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableParaEnviar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableParaEnviar.setToolTipText("");
        jTableParaEnviar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableParaEnviarMouseClicked(evt);
            }
        });
        jTableParaEnviar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableParaEnviarKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTableParaEnviar);

        jButtonAlterarPendente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/alterar.png"))); // NOI18N
        jButtonAlterarPendente.setText("Alterar");
        jButtonAlterarPendente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarPendenteActionPerformed(evt);
            }
        });

        jTextFieldResultadoPendente.setEditable(false);

        jLabel12.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel12.setText("resultado(s).");

        jButtonImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/printer.png"))); // NOI18N
        jButtonImprimir.setText("Imprimir");
        jButtonImprimir.setEnabled(false);
        jButtonImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirActionPerformed(evt);
            }
        });

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/sort_descend.png"))); // NOI18N
        jButton1.setText("Ordenar por data emissÃ£o");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jTextFieldResultadoPendente, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonImprimir)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAlterarPendente)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonAlterarPendente)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextFieldResultadoPendente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12)
                            .addComponent(jButtonImprimir)
                            .addComponent(jButton1))))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Para Enviar", jPanel4);

        jTableAguardandoAprovacao.setBackground(new java.awt.Color(255, 204, 0));
        jTableAguardandoAprovacao.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableAguardandoAprovacao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableAguardandoAprovacao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAguardandoAprovacaoMouseClicked(evt);
            }
        });
        jTableAguardandoAprovacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableAguardandoAprovacaoKeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTableAguardandoAprovacao);

        jTextFieldResultadoComEstoquePa.setEditable(false);

        jLabel15.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel15.setText("resultado(s).");

        jButtonAlterarCancelamentos1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/alterar.png"))); // NOI18N
        jButtonAlterarCancelamentos1.setText("Alterar");
        jButtonAlterarCancelamentos1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarCancelamentos1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addComponent(jTextFieldResultadoComEstoquePa, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAlterarCancelamentos1)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAlterarCancelamentos1)
                    .addComponent(jTextFieldResultadoComEstoquePa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Aguardando AprovaÃ§Ã£o", jPanel8);

        jTableEnviados.setBackground(new java.awt.Color(204, 255, 204));
        jTableEnviados.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableEnviados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableEnviados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableEnviadosMouseClicked(evt);
            }
        });
        jTableEnviados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableEnviadosKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTableEnviados);

        jTextFieldResultadoEnviadas.setEditable(false);

        jLabel13.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel13.setText("resultado(s).");

        jButtonAlterarEnviadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/alterar.png"))); // NOI18N
        jButtonAlterarEnviadas.setText("Alterar");
        jButtonAlterarEnviadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarEnviadasActionPerformed(evt);
            }
        });

        jButtonImprimirEnviadas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/printer.png"))); // NOI18N
        jButtonImprimirEnviadas.setText("Imprimir");
        jButtonImprimirEnviadas.setEnabled(false);
        jButtonImprimirEnviadas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonImprimirEnviadasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jTextFieldResultadoEnviadas, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonImprimirEnviadas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAlterarEnviadas)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAlterarEnviadas)
                    .addComponent(jTextFieldResultadoEnviadas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jButtonImprimirEnviadas))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Enviado", jPanel5);

        jTableCancelados.setBackground(new java.awt.Color(255, 204, 204));
        jTableCancelados.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jTableCancelados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableCancelados.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableCanceladosMouseClicked(evt);
            }
        });
        jTableCancelados.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTableCanceladosKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTableCancelados);

        jTextFieldResultadoCancelamentos.setEditable(false);

        jLabel14.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel14.setText("resultado(s).");

        jButtonAlterarCancelamentos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/ortus/icones/alterar.png"))); // NOI18N
        jButtonAlterarCancelamentos.setText("Alterar");
        jButtonAlterarCancelamentos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAlterarCancelamentosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jTextFieldResultadoCancelamentos, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonAlterarCancelamentos)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 344, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonAlterarCancelamentos)
                    .addComponent(jTextFieldResultadoCancelamentos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addContainerGap())
        );

        jTabbedPane1.addTab("DesistÃªncias/Cancelamentos", jPanel6);

        jTableEstoquePA.setBackground(new java.awt.Color(204, 204, 255));
        jTableEstoquePA.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jTableEstoquePA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(jTableEstoquePA);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1256, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(250, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Estoque Produto Acabado", jPanel7);

        jPanel3.setBackground(new java.awt.Color(153, 153, 255));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 46, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTabbedPane1))
                .addContainerGap())
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("Para Enviar");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSalvarActionPerformed
        // TODO add your handling code here:
        salvar();
    }//GEN-LAST:event_jButtonSalvarActionPerformed

    private void jButtonRemoverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoverActionPerformed
        // TODO add your handling code here:
        remover();
    }//GEN-LAST:event_jButtonRemoverActionPerformed

    private void jButtonLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLimparActionPerformed
        // TODO add your handling code here:
        novo();
    }//GEN-LAST:event_jButtonLimparActionPerformed

    private void jButtonFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFecharActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jButtonFecharActionPerformed

    private void jButtonAlterarPendenteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarPendenteActionPerformed
        // TODO add your handling code here:
        alterar();
    }//GEN-LAST:event_jButtonAlterarPendenteActionPerformed

    private void jButtonAlterarEnviadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarEnviadasActionPerformed
        // TODO add your handling code here:
        alterarEnviadas();
    }//GEN-LAST:event_jButtonAlterarEnviadasActionPerformed

    private void jButtonAlterarCancelamentosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarCancelamentosActionPerformed
        // TODO add your handling code here:
        alterarCanceladas();
    }//GEN-LAST:event_jButtonAlterarCancelamentosActionPerformed

    private void jButtonAlterarCancelamentos1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAlterarCancelamentos1ActionPerformed
        // TODO add your handling code here:
        alterarPedidosComEstoquePA();
    }//GEN-LAST:event_jButtonAlterarCancelamentos1ActionPerformed

    private void jFormattedTextFieldDataEmissaoPedidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDataEmissaoPedidoFocusLost
        // TODO add your handling code here:
        if (dataEstaVazio(jFormattedTextFieldDataEmissaoPedido.getText())) {
            jFormattedTextFieldDataEmissaoPedido.setText(pegarData());
        }
    }//GEN-LAST:event_jFormattedTextFieldDataEmissaoPedidoFocusLost

    private void jFormattedTextFieldDataPrevistaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDataPrevistaFocusLost
        // TODO add your handling code here:
        if (dataEstaVazio(jFormattedTextFieldDataPrevista.getText())) {
            jFormattedTextFieldDataPrevista.setText(pegarData());
        }
    }//GEN-LAST:event_jFormattedTextFieldDataPrevistaFocusLost

    private void jFormattedTextFieldDataEnvioPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDataEnvioPAFocusLost
        // TODO add your handling code here:
        if (dataEstaVazio(jFormattedTextFieldDataEnvioPA.getText())) {
            jFormattedTextFieldDataEnvioPA.setText(pegarData());
        }
    }//GEN-LAST:event_jFormattedTextFieldDataEnvioPAFocusLost

    private void jFormattedTextFieldDataEntregaPAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFormattedTextFieldDataEntregaPAFocusLost

        if (dataEstaVazio(jFormattedTextFieldDataEntregaPA.getText())) {
            jFormattedTextFieldDataEntregaPA.setText(pegarData());
        }
    }//GEN-LAST:event_jFormattedTextFieldDataEntregaPAFocusLost

    private void jButtonImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirActionPerformed
        // TODO add your handling code here:
        imprimirRelatorioPendentes();
    }//GEN-LAST:event_jButtonImprimirActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        //ordenarPorDataEmissao();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBoxStatusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxStatusActionPerformed
        // TODO add your handling code here:
        habilitarDataEnvio(null);
    }//GEN-LAST:event_jComboBoxStatusActionPerformed

    private void jTextFieldNumeroPedidoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTextFieldNumeroPedidoFocusLost
        // TODO add your handling code here:
        //verificarSeHaPedidoCadastrado();
    }//GEN-LAST:event_jTextFieldNumeroPedidoFocusLost

    private void jButtonImprimirEnviadasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonImprimirEnviadasActionPerformed
        // TODO add your handling code here:
        imprimirEnviadas();
    }//GEN-LAST:event_jButtonImprimirEnviadasActionPerformed

    private void jTableParaEnviarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableParaEnviarMouseClicked
        // TODO add your handling code here:
        preencherComPedidosPraEnviarClicando();
    }//GEN-LAST:event_jTableParaEnviarMouseClicked

    private void jTableAguardandoAprovacaoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAguardandoAprovacaoMouseClicked
        // TODO add your handling code here:
        preencherComPedidosAguardandoAprovacao();
    }//GEN-LAST:event_jTableAguardandoAprovacaoMouseClicked

    private void jTableEnviadosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableEnviadosMouseClicked
        // TODO add your handling code here:
        preencherComPedidosEnviados();
    }//GEN-LAST:event_jTableEnviadosMouseClicked

    private void jTableParaEnviarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableParaEnviarKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 38) {
            try {
                int linha = jTableParaEnviar.getSelectedRow() - 1;
                preencherComPedidosParaEnviar(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (evt.getKeyCode() == 40) {
            try {
                int linha = jTableParaEnviar.getSelectedRow() + 1;
                preencherComPedidosParaEnviar(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jTableParaEnviarKeyPressed

    private void jTableAguardandoAprovacaoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableAguardandoAprovacaoKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 38) {
            try {
                int linha = jTableAguardandoAprovacao.getSelectedRow() - 1;
                preencherComPedidosAguardandoAprovacao(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (evt.getKeyCode() == 40) {
            try {
                int linha = jTableAguardandoAprovacao.getSelectedRow() + 1;
                preencherComPedidosAguardandoAprovacao(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jTableAguardandoAprovacaoKeyPressed

    private void jTableEnviadosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableEnviadosKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 38) {
            try {
                int linha = jTableEnviados.getSelectedRow() - 1;
                preencherComPedidosEnviados(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (evt.getKeyCode() == 40) {
            try {
                int linha = jTableEnviados.getSelectedRow() + 1;
                preencherComPedidosEnviados(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jTableEnviadosKeyPressed

    private void jTableCanceladosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableCanceladosMouseClicked
        preencherComPedidosCancelados();
    }//GEN-LAST:event_jTableCanceladosMouseClicked

    private void jTableCanceladosKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTableCanceladosKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == 38) {
            try {
                int linha = jTableCancelados.getSelectedRow() - 1;
                preencherComPedidosCancelados(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        } else if (evt.getKeyCode() == 40) {
            try {
                int linha = jTableCancelados.getSelectedRow() + 1;
                preencherComPedidosCancelados(linha);
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_jTableCanceladosKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JDialogPedidosReservados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JDialogPedidosReservados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JDialogPedidosReservados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JDialogPedidosReservados.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the dialog
         */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JDialogPedidosReservados dialog = new JDialogPedidosReservados(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAlterarCancelamentos;
    private javax.swing.JButton jButtonAlterarCancelamentos1;
    private javax.swing.JButton jButtonAlterarEnviadas;
    private javax.swing.JButton jButtonAlterarPendente;
    private javax.swing.JButton jButtonFechar;
    private javax.swing.JButton jButtonImprimir;
    private javax.swing.JButton jButtonImprimirEnviadas;
    private javax.swing.JButton jButtonLimpar;
    private javax.swing.JButton jButtonRemover;
    private javax.swing.JButton jButtonSalvar;
    private javax.swing.JComboBox jComboBoxEnvio;
    private javax.swing.JComboBox jComboBoxRepresentante;
    private javax.swing.JComboBox jComboBoxStatus;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataEmissaoPedido;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataEntregaPA;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataEnvioPA;
    private javax.swing.JFormattedTextField jFormattedTextFieldDataPrevista;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSpinner jSpinnerBioJato;
    private javax.swing.JSpinner jSpinnerBioscalerCB;
    private javax.swing.JSpinner jSpinnerBioscalerSB;
    private javax.swing.JSpinner jSpinnerKitJato;
    private javax.swing.JSpinner jSpinnerKitLedLux;
    private javax.swing.JSpinner jSpinnerKitOrtusonic;
    private javax.swing.JSpinner jSpinnerLedLuxI;
    private javax.swing.JSpinner jSpinnerLedLuxII;
    private javax.swing.JSpinner jSpinnerSoniI;
    private javax.swing.JSpinner jSpinnerSoniII;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTableAguardandoAprovacao;
    private javax.swing.JTable jTableCancelados;
    private javax.swing.JTable jTableEnviados;
    private javax.swing.JTable jTableEstoquePA;
    private javax.swing.JTable jTableParaEnviar;
    private javax.swing.JTextField jTextFieldCliente;
    private javax.swing.JTextField jTextFieldID;
    private javax.swing.JTextField jTextFieldNumeroPedido;
    private javax.swing.JTextField jTextFieldObs;
    private javax.swing.JTextField jTextFieldResultadoCancelamentos;
    private javax.swing.JTextField jTextFieldResultadoComEstoquePa;
    private javax.swing.JTextField jTextFieldResultadoEnviadas;
    private javax.swing.JTextField jTextFieldResultadoPendente;
    // End of variables declaration//GEN-END:variables

    private void salvar() {
        if (!validarCampos()) {
            return;
        } else {
            int opcao = JOptionPane.showConfirmDialog(rootPane,
                    "Deseja salvar?", "ConfirmaÃ§Ã£o",
                    JOptionPane.YES_NO_OPTION);
            if (opcao != JOptionPane.YES_OPTION) {
                return;
            }
            PedidosReservados pedido = new PedidosReservados();
            if (!jTextFieldID.getText().isEmpty()) {
                pedido.setId(Integer.parseInt(jTextFieldID.getText()));
            }
            pedido.setDataEmissaoPedido(jFormattedTextFieldDataEmissaoPedido.getText());
            pedido.setNumeroPedido(Integer.parseInt(jTextFieldNumeroPedido.getText()));
            pedido.setNomeCliente(jTextFieldCliente.getText());
            pedido.setRepresentante(jComboBoxRepresentante.getSelectedItem().toString());
            pedido.setFormaEnvio(jComboBoxEnvio.getSelectedItem().toString());
            pedido.setDataPrevistaProducao(jFormattedTextFieldDataPrevista.getText());
            pedido.setObs(jTextFieldObs.getText());
            pedido.setBiojato((Integer) jSpinnerBioJato.getValue());
            pedido.setBioscalerCB((Integer) jSpinnerBioscalerCB.getValue());
            pedido.setBioscalerSB((Integer) jSpinnerBioscalerSB.getValue());
            pedido.setSoniI((Integer) jSpinnerSoniI.getValue());
            pedido.setSoniII((Integer) jSpinnerSoniII.getValue());
            pedido.setLedLuxI((Integer) jSpinnerLedLuxI.getValue());
            pedido.setLedLuxII((Integer) jSpinnerLedLuxII.getValue());
            pedido.setKitLedLux((Integer) jSpinnerKitLedLux.getValue());
            pedido.setKitOrtusonic((Integer) jSpinnerKitOrtusonic.getValue());
            pedido.setKitJato((Integer) jSpinnerKitJato.getValue());
            pedido.setDataPANoEstoque(jFormattedTextFieldDataEntregaPA.getText());
            pedido.setDataEnvioPA(jFormattedTextFieldDataEnvioPA.getText());
            pedido.setStatus(jComboBoxStatus.getSelectedItem().toString());

            if (jComboBoxStatus.getSelectedItem().toString().equals("Enviado")) {
                atualizarEstoque(pedido);
            }


            TransactionManager.beginTransaction();
            try {
                PedidosReservadosDao pDao = new PedidosReservadosDao();

                pDao.persistir(pedido);

                TransactionManager.commit();


                popularTabelaParaEnviar(false);
                popularTabelaEnviados();
                popularTabelaCancelados();
                popularTabelaAguardandoAprovacao();
                popularTabelaEstoquePA();
                novo();
            } catch (Exception e) {
                TransactionManager.rollback();
                JOptionPane.showMessageDialog(null, "Cliente nÃ£o pode ser gravado!" + e);
            }
        }
    }

    private boolean validarCampos() {
        if (jTextFieldID.getText().isEmpty() && jTextFieldCliente.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "O cliente deve ser preenchido!");
            return false;
        }
//        else if (!verificarNumeroPedido()) {
//            return false;
//        }
        return true;
    }

    private void novo() {
        jTextFieldID.setText(null);
        jFormattedTextFieldDataEmissaoPedido.setText(null);
        jTextFieldNumeroPedido.setText(null);
        jTextFieldCliente.setText(null);
        jComboBoxRepresentante.setSelectedIndex(0);
        jComboBoxEnvio.setSelectedIndex(0);
        jFormattedTextFieldDataPrevista.setText(null);
        jTextFieldObs.setText(null);
        jSpinnerBioJato.setValue(0);
        jSpinnerBioscalerCB.setValue(0);
        jSpinnerBioscalerSB.setValue(0);
        jSpinnerSoniI.setValue(0);
        jSpinnerSoniII.setValue(0);
        jSpinnerLedLuxI.setValue(0);
        jSpinnerLedLuxII.setValue(0);
        jSpinnerKitLedLux.setValue(0);
        jSpinnerKitOrtusonic.setValue(0);
        jSpinnerKitJato.setValue(0);
        jFormattedTextFieldDataEntregaPA.setText(null);
        jFormattedTextFieldDataEnvioPA.setText(null);
        jComboBoxStatus.setSelectedIndex(0);

    }

    private void remover() {
        int opcao = JOptionPane.showConfirmDialog(rootPane,
                "Deseja mesmo remover?", "ConfirmaÃ§Ã£o",
                JOptionPane.YES_NO_OPTION);
        if (opcao != JOptionPane.YES_OPTION) {
            return;
        }
        if (!jTextFieldID.getText().isEmpty()) {
            TransactionManager.beginTransaction();
            try {
                PedidosReservadosDao pDao = new PedidosReservadosDao();
                PedidosReservados pedido = pDao.obterPorId(Integer.parseInt(jTextFieldID.getText()));
                pDao.remover(pedido);
                TransactionManager.commit();
                JOptionPane.showMessageDialog(null, "Troca removida com sucesso!");
                popularTabelaParaEnviar(false);
                popularTabelaEnviados();
                popularTabelaCancelados();
                popularTabelaAguardandoAprovacao();
                popularTabelaEstoquePA();
                novo();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Erro! NÃ£o foi possivel excluir o pedido!\n" + e);
                return;
            }
        } else {
            JOptionPane.showMessageDialog(null, "ID invÃ¡lido! Selecione um pedido vÃ¡lido para excluir!");
            return;
        }
    }

    private void alterar() {
        int linha = jTableParaEnviar.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedidos = pedidosParaEnviar.get(linha);
            preencherFormularioComDados(pedidos);
            habilitarDataEnvio(pedidos);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o componente.");
            return;
        }
    }

    private void preencherFormularioComDados(PedidosReservados pedido) {
        jTextFieldID.setText(String.valueOf(pedido.getId()));
        jFormattedTextFieldDataEmissaoPedido.setText(pedido.getDataEmissaoPedido());
        jTextFieldNumeroPedido.setText(String.valueOf(pedido.getNumeroPedido()));
        jTextFieldCliente.setText(pedido.getNomeCliente());
        jComboBoxRepresentante.setSelectedIndex(verificarRepresentante(pedido.getRepresentante()));
        jComboBoxEnvio.setSelectedIndex(verificarEnvio(pedido.getFormaEnvio()));
        jFormattedTextFieldDataPrevista.setText(pedido.getDataPrevistaProducao());
        jTextFieldObs.setText(pedido.getObs());
        jSpinnerBioJato.setValue(pedido.getBiojato());
        jSpinnerBioscalerCB.setValue(pedido.getBioscalerCB());
        jSpinnerBioscalerSB.setValue(pedido.getBioscalerSB());
        jSpinnerSoniI.setValue(pedido.getSoniI());
        jSpinnerSoniII.setValue(pedido.getSoniII());
        jSpinnerLedLuxI.setValue(pedido.getLedLuxI());
        jSpinnerLedLuxII.setValue(pedido.getLedLuxII());
        jSpinnerKitLedLux.setValue(pedido.getKitLedLux());
        jSpinnerKitOrtusonic.setValue(pedido.getKitOrtusonic());
        jSpinnerKitJato.setValue(pedido.getKitJato());
        jFormattedTextFieldDataEntregaPA.setText(pedido.getDataPANoEstoque());
        jFormattedTextFieldDataEnvioPA.setText(pedido.getDataEnvioPA());
        jComboBoxStatus.setSelectedIndex(verificarStatus(pedido.getStatus()));
    }

    private void alterarEnviadas() {
        int linha = jTableEnviados.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedido = pedidosEnviados.get(linha);
            preencherFormularioComDados(pedido);
            habilitarDataEnvio(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o pedido.");
            return;
        }
    }

    private boolean verificarNumeroPedido() {
        try {
            int num = Integer.parseInt(jTextFieldNumeroPedido.getText());
            return true;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "NÃºmero do pedido invÃ¡lido!");
            return false;
        }
    }

    private void popularTabelaParaEnviar(boolean ordenar) {
        PedidosReservadosDao pDao = new PedidosReservadosDao();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"EmissÃ£o", "Pedido", "Cliente", "Representante", "Biojato", "Bios. CB", "Bios. SB", "Soni I", "Soni II", "Led I", "Led II", "Kit Led", "Kit Ortusonic", "Kit Jato", "Envio", "Data Prevista", "Obs.", "Entrega PA", "Envio PA"});

        if (ordenar == false) {
            pedidosParaEnviar = pDao.obterTrocas("Para Enviar");
        }

        if (pedidosParaEnviar != null) {
            for (PedidosReservados pedido : pedidosParaEnviar) {
                model.addRow(new Object[]{pedido.getDataEmissaoPedido(), pedido.getNumeroPedido(), pedido.getNomeCliente(), pedido.getRepresentante(), pedido.getBiojato(), pedido.getBioscalerCB(), pedido.getBioscalerSB(), pedido.getSoniI(), pedido.getSoniII(), pedido.getLedLuxI(), pedido.getLedLuxII(), pedido.getKitLedLux(), pedido.getKitOrtusonic(), pedido.getKitJato(), pedido.getFormaEnvio(), pedido.getDataPrevistaProducao(), pedido.getObs(), pedido.getDataPANoEstoque(), pedido.getDataEnvioPA()});
            }
            jTableParaEnviar.setModel(model);
            definirTamanhoDasColunas(jTableParaEnviar);
        }
        jTextFieldResultadoPendente.setText(String.valueOf(pedidosParaEnviar.size()));
    }

    private int verificarStatus(String status) {
        int cont = 0;
        while (cont < jComboBoxStatus.getItemCount()) {
            if (status.equals(jComboBoxStatus.getItemAt(cont).toString())) {
                return cont;
            }
            cont++;
        }
        return cont;
    }

    private void popularTabelaEnviados() {
        PedidosReservadosDao pDao = new PedidosReservadosDao();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"EmissÃ£o", "Pedido", "Cliente", "Representante", "Biojato", "Bios. CB", "Bios. SB", "Soni I", "Soni II", "Led I", "Led II", "Kit Led", "Kit Ortusonic", "Kit Jato", "Envio", "Data Prevista", "Obs.", "Entrega PA", "Envio PA"});
        pedidosEnviados = pDao.obterTrocas("Enviado");

        if (pedidosEnviados != null) {
            for (PedidosReservados pedido : pedidosEnviados) {
                model.addRow(new Object[]{pedido.getDataEmissaoPedido(), pedido.getNumeroPedido(), pedido.getNomeCliente(), pedido.getRepresentante(), pedido.getBiojato(), pedido.getBioscalerCB(), pedido.getBioscalerSB(), pedido.getSoniI(), pedido.getSoniII(), pedido.getLedLuxI(), pedido.getLedLuxII(), pedido.getKitLedLux(), pedido.getKitOrtusonic(), pedido.getKitJato(), pedido.getFormaEnvio(), pedido.getDataPrevistaProducao(), pedido.getObs(), pedido.getDataPANoEstoque(), pedido.getDataEnvioPA()});
            }
            jTableEnviados.setModel(model);
            definirTamanhoDasColunas(jTableEnviados);
        }
        jTextFieldResultadoEnviadas.setText(String.valueOf(pedidosEnviados.size()));
    }

    private void popularTabelaCancelados() {
        PedidosReservadosDao pDao = new PedidosReservadosDao();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"EmissÃ£o", "Pedido", "Cliente", "Representante", "Biojato", "Bios. CB", "Bios. SB", "Soni I", "Soni II", "Led I", "Led II", "Kit Led", "Kit Ortusonic", "Kit Jato", "Envio", "Data Prevista", "Obs.", "Entrega PA", "Envio PA"});
        pedidosCancelados = pDao.obterTrocas("Cancelado");

        if (pedidosCancelados != null) {
            for (PedidosReservados pedido : pedidosCancelados) {
                model.addRow(new Object[]{pedido.getDataEmissaoPedido(), pedido.getNumeroPedido(), pedido.getNomeCliente(), pedido.getRepresentante(), pedido.getBiojato(), pedido.getBioscalerCB(), pedido.getBioscalerSB(), pedido.getSoniI(), pedido.getSoniII(), pedido.getLedLuxI(), pedido.getLedLuxII(), pedido.getKitLedLux(), pedido.getKitOrtusonic(), pedido.getKitJato(), pedido.getFormaEnvio(), pedido.getDataPrevistaProducao(), pedido.getObs(), pedido.getDataPANoEstoque(), pedido.getDataEnvioPA()});
            }
            jTableCancelados.setModel(model);
            definirTamanhoDasColunas(jTableCancelados);
        }
        jTextFieldResultadoCancelamentos.setText(String.valueOf(pedidosCancelados.size()));
    }

    private void alterarCanceladas() {
        int linha = jTableCancelados.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedido = pedidosCancelados.get(linha);
            preencherFormularioComDados(pedido);
            habilitarDataEnvio(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o pedido.");
            return;
        }
    }

    private void popularTabelaEstoquePA() {
        EstoqueDao rDao = new EstoqueDao();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{" ", "Biojato", "Bios. CB", "Bios. SB", "Soni I", "Soni II", "Led I", "Led II", "Kit Led", "Kit Ortusonic", "Kit Jato"});
        estoquePA = rDao.obterLista().get(0);

        int[] produtos = {estoquePA.getBiojato(), estoquePA.getBioscalerCB(), estoquePA.getBioscalerSB(), estoquePA.getSoniI(), estoquePA.getSoniII(), estoquePA.getLedLuxI(), estoquePA.getLedLuxII(), estoquePA.getKitLedLux(), estoquePA.getKitOrtusonic(), estoquePA.getKitJato()};

        int[] produtosPedidos = {calcularQtdBioJato(), calcularQtdBsCB(), calcularQtdBsSB(), calcularQtdSoniI(), calcularQtdSoniII(), calcularQtdLedI(), calcularQtdLedII(), calcularQtdKitLed(), calcularQtdKitOrtusonic(), calcularQtdKitJato()};
        int[] produtosAguardando = {calcularQtdBioJato2(), calcularQtdBsCB2(), calcularQtdBsSB2(), calcularQtdSoniI2(), calcularQtdSoniII2(), calcularQtdLedI2(), calcularQtdLedII2(), calcularQtdKitLed2(), calcularQtdKitOrtusonic2(), calcularQtdKitJato2()};


        //System.out.println(calcularQtdBioJato());

        if (estoquePA != null) {
            model.addRow(new Object[]{"Estoque PA", produtos[0], produtos[1], produtos[2], produtos[3], produtos[4], produtos[5], produtos[6], produtos[7], produtos[8], produtos[9]});
            model.addRow(new Object[]{"Pedidos Confirmados", produtosPedidos[0], produtosPedidos[1], produtosPedidos[2], produtosPedidos[3], produtosPedidos[4], produtosPedidos[5], produtosPedidos[6], produtosPedidos[7], produtosPedidos[8], produtosPedidos[9]});
            model.addRow(new Object[]{"Aguardando AprovaÃ§Ã£o", produtosAguardando[0], produtosAguardando[1], produtosAguardando[2], produtosAguardando[3], produtosAguardando[4], produtosAguardando[5], produtosAguardando[6], produtosAguardando[7], produtosAguardando[8], produtosAguardando[9]});
            model.addRow(new Object[]{"Saldo", produtos[0] - produtosPedidos[0] - produtosAguardando[0], produtos[1] - produtosPedidos[1] - produtosAguardando[1], produtos[2] - produtosPedidos[2] - produtosAguardando[2], produtos[3] - produtosPedidos[3] - produtosAguardando[3], produtos[4] - produtosPedidos[4] - produtosAguardando[4], produtos[5] - produtosPedidos[5] - produtosAguardando[5], produtos[6] - produtosPedidos[6] - produtosAguardando[6], produtos[7] - produtosPedidos[7] - produtosAguardando[7], produtos[8] - produtosPedidos[8] - produtosAguardando[8], produtos[9] - produtosPedidos[9] - produtosAguardando[9]});

            jTableEstoquePA.setModel(model);
            definirTamanhoDasColunasEstoqueEColorir(jTableEstoquePA);
        }
    }

    private int verificarRepresentante(String representante) {
        int cont = 0;
        while (cont < jComboBoxRepresentante.getItemCount()) {
            if (representante.equals(jComboBoxRepresentante.getItemAt(cont).toString())) {
                return cont;
            }
            cont++;
        }
        return cont;
    }

    private int verificarEnvio(String formaEnvio) {
        int cont = 0;
        while (cont < jComboBoxEnvio.getItemCount()) {
            if (formaEnvio.equals(jComboBoxEnvio.getItemAt(cont).toString())) {
                return cont;
            }
            cont++;
        }
        return cont;
    }

    private void popularTabelaAguardandoAprovacao() {
        PedidosReservadosDao pDao = new PedidosReservadosDao();
        DefaultTableModel model = new DefaultTableModel();
        model.setColumnIdentifiers(new String[]{"EmissÃ£o", "Pedido", "Cliente", "Representante", "Biojato", "Bios. CB", "Bios. SB", "Soni I", "Soni II", "Led I", "Led II", "Kit Led", "Kit Ortusonic", "Kit Jato", "Envio", "Data Prevista", "Obs.", "Entrega PA", "Envio PA"});
        pedidosAguardandoAprovacao = pDao.obterTrocas("Aguardando AprovaÃ§Ã£o");

        if (pedidosAguardandoAprovacao != null) {
            for (PedidosReservados pedido : pedidosAguardandoAprovacao) {
                model.addRow(new Object[]{pedido.getDataEmissaoPedido(), pedido.getNumeroPedido(), pedido.getNomeCliente(), pedido.getRepresentante(), pedido.getBiojato(), pedido.getBioscalerCB(), pedido.getBioscalerSB(), pedido.getSoniI(), pedido.getSoniII(), pedido.getLedLuxI(), pedido.getLedLuxII(), pedido.getKitLedLux(), pedido.getKitOrtusonic(), pedido.getKitJato(), pedido.getFormaEnvio(), pedido.getDataPrevistaProducao(), pedido.getObs(), pedido.getDataPANoEstoque(), pedido.getDataEnvioPA()});
            }
            jTableAguardandoAprovacao.setModel(model);
            definirTamanhoDasColunas(jTableAguardandoAprovacao);
        }
        jTextFieldResultadoComEstoquePa.setText(String.valueOf(pedidosAguardandoAprovacao.size()));
    }

    private String pegarData() {
        String data = new Utilidades().calendarToString(Calendar.getInstance());
        return data;
    }

    private void alterarPedidosComEstoquePA() {
        int linha = jTableAguardandoAprovacao.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedido = pedidosAguardandoAprovacao.get(linha);
            preencherFormularioComDados(pedido);
            habilitarDataEnvio(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o pedido.");
            return;
        }
    }

    private boolean dataEstaVazio(String text) {
        if (text.equals("  /  /2013")) {
            return true;
        }
        return false;
    }

    private int calcularQtdBioJato() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getBiojato();
            }
        }
        return valor;
    }

    private int calcularQtdBsCB() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getBioscalerCB();
            }
        }
        return valor;
    }

    private int calcularQtdBsSB() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getBioscalerSB();
            }
        }
        return valor;
    }

    private int calcularQtdSoniI() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getSoniI();
            }
        }
        return valor;
    }

    private int calcularQtdLedII() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getLedLuxII();
            }
        }
        return valor;
    }

    private int calcularQtdLedI() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getLedLuxI();
            }
        }
        return valor;
    }

    private int calcularQtdSoniII() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getSoniII();
            }
        }

        return valor;
    }

    private void atualizarEstoque(PedidosReservados pedido) {

        TransactionManager.beginTransaction();
        try {
            estoquePA.setBiojato(estoquePA.getBiojato() - pedido.getBiojato());
            estoquePA.setBioscalerCB(estoquePA.getBioscalerCB() - pedido.getBioscalerCB());
            estoquePA.setBioscalerSB(estoquePA.getBioscalerSB() - pedido.getBioscalerSB());
            estoquePA.setSoniI(estoquePA.getSoniI() - pedido.getSoniI());
            estoquePA.setSoniII(estoquePA.getSoniII() - pedido.getSoniII());
            estoquePA.setLedLuxI(estoquePA.getLedLuxI() - pedido.getLedLuxI());
            estoquePA.setLedLuxII(estoquePA.getLedLuxII() - pedido.getLedLuxII());
            estoquePA.setKitLedLux(estoquePA.getKitLedLux() - pedido.getKitLedLux());
            estoquePA.setKitOrtusonic(estoquePA.getKitOrtusonic() - pedido.getKitOrtusonic());
            estoquePA.setKitJato(estoquePA.getKitJato() - pedido.getKitJato());

            new EstoqueDao().persistir(estoquePA);
            TransactionManager.commit();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Erro! NÃ£o foi possivel atualizar o estoque!\n" + e);
            return;
        }
    }

    private void imprimirRelatorioPendentes() {
        relatorioPronto("/br/com/ortus/relatorios/relatorioPendentes.jasper");
        dispose();
    }

    private void relatorioPronto(String caminho) {
        try {
            // obtem o arquivo de relatorio compilado
            URL arquivo = getClass().getResource(caminho);

            // carrega o relatorio

            JasperReport jasperReport = (JasperReport) JRLoader.loadObject(arquivo);

            // preenche o relatorio com os dados do BD
            JasperPrint jasperPrint = JasperFillManager.fillReport(jasperReport, new HashMap(), DBConnection.getConnection());

            // cria visualizador de relatorio
            JasperViewer jrviewer = new JasperViewer(jasperPrint, false);
            // mostra o visualizador
            jrviewer.setAlwaysOnTop(true);
            jrviewer.setVisible(true);


        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERRO: " + e);
            ByteArrayOutputStream b = new ByteArrayOutputStream();
            PrintWriter p = new PrintWriter(b, true);
            e.printStackTrace(p);
            //p.flush();
            System.out.println(e.getMessage() + "\n Detalhes: \n" + b.toString());
        }
    }

//    private void ordenarPorDataEmissao() {
//        List<PedidosReservados> listaOrdenada = ordenar(pedidosPendentes);
//        pedidosPendentes = listaOrdenada;
//        popularTabelaPendentes(true);
//    }
//    private List<PedidosReservados> ordenar(List<PedidosReservados> pedidos) {
//        Collections.sort(pedidos, new Comparator() {
//            @Override
//            public int compare(Object o1, Object o2) {
//                PedidosReservados p1 = (PedidosReservados) o1;
//                PedidosReservados p2 = (PedidosReservados) o2;
//                return p1.getDataEmissaoPedido().before(p2.getDataEmissaoPedido()) ? -1 : (p1.getDataEmissaoPedido().after(p2.getDataEmissaoPedido()) ? 1 : 0);
//            }
//        });
//        return pedidos;
//    }
    private Object pegarDataBanco(Calendar data) {
        if (data != null) {
            return new Utilidades().calendarToString(data);
        } else {
            return "  /  /    ";
        }


    }

    private void verificarSeHaPedidoCadastrado() {
        List<PedidosReservados> pedidos = (List<PedidosReservados>) new PedidosReservadosDao().obterLista(" numeroPedido='" + jTextFieldNumeroPedido.getText() + "'");
        if (!pedidos.isEmpty()) {
            JOptionPane.showMessageDialog(rootPane, "AtenÃ§Ã£o!!! Numero de pedido jÃ¡ cadastrado.");
            jButtonSalvar.setEnabled(false);
            return;
        } else {
            jButtonSalvar.setEnabled(true);
        }
    }

    private void habilitarDataEnvio(PedidosReservados pedidos) {
        if (pedidos == null) {
            if (jComboBoxStatus.getSelectedItem().toString().equals("Enviado")) {
                jFormattedTextFieldDataEnvioPA.setEnabled(true);
            } else {
                jFormattedTextFieldDataEnvioPA.setEnabled(false);
            }
        } else {
            if (pedidos.getStatus().equals("Enviado")) {
                jFormattedTextFieldDataEnvioPA.setEnabled(true);
            } else {
                jFormattedTextFieldDataEnvioPA.setEnabled(false);
            }
        }
    }

    private void definirTamanhoDasColunas(JTable tabela) {
        tabela.getColumnModel().getColumn(0).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(1).setPreferredWidth(70);
        tabela.getColumnModel().getColumn(2).setPreferredWidth(250);
        tabela.getColumnModel().getColumn(3).setPreferredWidth(100);
        //tabela.getColumnModel().getColumn(12).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(14).setPreferredWidth(100);
        tabela.getColumnModel().getColumn(15).setPreferredWidth(100);
    }

    private void verificarUsuario() {
        Usuario usuario = (Usuario) HashSistema.hash.get("usuarioLogado");
        if (usuario.getTipo().equals("Administrador")) {
            jButtonRemover.setEnabled(true);
        } else {
            jButtonRemover.setEnabled(false);
        }
    }

    private void imprimirEnviadas() {
        relatorioPronto("/br/com/ortus/relatorios/relatorioEnviadas.jasper");
        dispose();
    }

    private int calcularQtdKitLed() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getKitLedLux();
            }
        }
        return valor;
    }

    private int calcularQtdKitOrtusonic() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getKitOrtusonic();
            }
        }
        return valor;
    }

    private int calcularQtdKitJato() {
        int valor = 0;
        if (!pedidosParaEnviar.isEmpty()) {
            for (int i = 0; i < pedidosParaEnviar.size(); i++) {
                valor += pedidosParaEnviar.get(i).getKitJato();
            }
        }
        return valor;
    }

    private void preencherComPedidosPraEnviarClicando() {
        int linha = jTableParaEnviar.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedidos = pedidosParaEnviar.get(linha);
            preencherFormularioComDados(pedidos);
            habilitarDataEnvio(pedidos);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o componente.");
            return;
        }
    }

    private void preencherComPedidosAguardandoAprovacao() {
        int linha = jTableAguardandoAprovacao.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedidos = pedidosAguardandoAprovacao.get(linha);
            preencherFormularioComDados(pedidos);
            habilitarDataEnvio(pedidos);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o componente.");
            return;
        }
    }

    private void preencherComPedidosEnviados() {
        int linha = jTableEnviados.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedidos = pedidosEnviados.get(linha);
            preencherFormularioComDados(pedidos);
            habilitarDataEnvio(pedidos);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o componente.");
            return;
        }
    }

    private void preencherComPedidosEnviados(int linha) {
        if (linha != -1 || linha > pedidosEnviados.size()) {
            //Collections.reverse(trocasEnviadas);
            PedidosReservados pedido = pedidosEnviados.get(linha);
            preencherFormularioComDados(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar a troca.");
            return;
        }
    }

    private void preencherComPedidosParaEnviar(int linha) {
        if (linha != -1 || linha > pedidosParaEnviar.size()) {
            //Collections.reverse(trocasEnviadas);
            PedidosReservados pedido = pedidosParaEnviar.get(linha);
            preencherFormularioComDados(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar a troca.");
            return;
        }
    }

    private void preencherComPedidosAguardandoAprovacao(int linha) {
        if (linha != -1 || linha > pedidosAguardandoAprovacao.size()) {
            //Collections.reverse(trocasEnviadas);
            PedidosReservados pedido = pedidosAguardandoAprovacao.get(linha);
            preencherFormularioComDados(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar a troca.");
            return;
        }
    }

    private void preencherComPedidosCancelados() {
        int linha = jTableCancelados.getSelectedRow();
        if (linha != -1) {
            PedidosReservados pedidos = pedidosCancelados.get(linha);
            preencherFormularioComDados(pedidos);
            habilitarDataEnvio(pedidos);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar o componente.");
            return;
        }
    }

    private void preencherComPedidosCancelados(int linha) {
        if (linha != -1 || linha > pedidosCancelados.size()) {
            //Collections.reverse(trocasEnviadas);
            PedidosReservados pedido = pedidosCancelados.get(linha);
            preencherFormularioComDados(pedido);
        } else {
            JOptionPane.showMessageDialog(null, "Selecione uma linha para editar a troca.");
            return;
        }
    }

    private void iniciarThreadDasTabelas() {
        new Thread() {
            @Override
            public void run() {
                while (true) {                    
                    popularTabelaParaEnviar(false);
                    popularTabelaEnviados();
                    popularTabelaCancelados();
                    popularTabelaAguardandoAprovacao();
                    popularTabelaEstoquePA();                    
                    try {
                        sleep(30000);
                    } catch (Exception e) {
                        System.out.println(e);
                    }
                }
            }
        }.start();
    }

    private int calcularQtdBioJato2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getBiojato();
            }
        }
        return valor;
    }

    private int calcularQtdBsCB2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getBioscalerCB();
            }
        }
        return valor;
    }

    private int calcularQtdBsSB2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getBioscalerSB();
            }
        }
        return valor;
    }

    private int calcularQtdSoniI2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getSoniI();
            }
        }
        return valor;
    }

    private int calcularQtdSoniII2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getSoniII();
            }
        }
        return valor;
    }

    private int calcularQtdLedI2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getLedLuxI();
            }
        }
        return valor;
    }

    private int calcularQtdLedII2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getLedLuxII();
            }
        }
        return valor;
    }

    private int calcularQtdKitLed2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getKitLedLux();
            }
        }
        return valor;
    }

    private int calcularQtdKitOrtusonic2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getKitOrtusonic();
            }
        }
        return valor;
    }

    private int calcularQtdKitJato2() {
        int valor = 0;
        if (!pedidosAguardandoAprovacao.isEmpty()) {
            for (int j = 0; j < pedidosAguardandoAprovacao.size(); j++) {
                valor = pedidosAguardandoAprovacao.get(j).getKitJato();
            }
        }
        return valor;
    }

    private void definirTamanhoDasColunasEstoqueEColorir(JTable tabelaEstoque) {
        tabelaEstoque.getColumnModel().getColumn(0).setPreferredWidth(150);
    }

    private void coloriraLinhaDeSaldoEAguardandoAprovacao(int linha) {


        if (linha == 2) {
            jTableEstoquePA.setRowSelectionInterval(2, 2);
            jTableEstoquePA.setSelectionBackground(Color.YELLOW);
            jTableEstoquePA.setSelectionForeground(Color.DARK_GRAY);
            linha = 0;
        } else if (linha == 3) {
            jTableEstoquePA.setSelectionBackground(Color.RED);
            jTableEstoquePA.setSelectionForeground(Color.WHITE);
            linha = 0;
        } else {
            jTableEstoquePA.setSelectionBackground(Color.WHITE);
            jTableEstoquePA.setSelectionForeground(Color.BLACK);
            linha = 0;
        }
    }

    private void pintarLinhas() {
        jTableEstoquePA.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
            public Component getTableCellRendererComponent(JTable table, Object value,
                    boolean isSelected, boolean hasFocus, int row, int column) {
                super.getTableCellRendererComponent(table, value, isSelected,
                        hasFocus, row, column);
                if (row == 3) {
                    setBackground(Color.RED);
                    setForeground(Color.WHITE);
                } else if (row == 2) {
                    setBackground(Color.YELLOW);
                    setForeground(Color.BLACK);
                } else {
                    setBackground(Color.WHITE);
                    setForeground(Color.BLACK);
                }
                return this;
            }
        });


    }
}
//emissÃ£o
//pedido
//dataprevista